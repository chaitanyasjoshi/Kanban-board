{"version":3,"sources":["state/boardData.js","storage.js","components/AutoSizeTextArea.js","components/Card.js","components/AddCard.js","components/ListTitle.js","components/List.js","components/AddList.js","components/Board.js","img/no_tasks.svg","KanbanBoard.js","index.js"],"names":["boardData","boardDataSubject","Subject","subscribe","_boardData","addList","listTitle","list","position","Object","keys","length","list_title","cards","uuidv4","next","localforage","setItem","getItem","then","defaultBoardData","CustomTextArea","styled","TextArea","props","editMode","AutoSizeTextArea","placeholder","onSave","updateValue","onBlur","useState","textAreaValue","setTextAreaValue","textAreaRef","useRef","useEffect","resizeTextArea","current","focus","select","style","height","scrollHeight","ref","value","onChange","e","target","rows","onKeyDown","keyCode","preventDefault","blur","spellCheck","Delete","div","TextAreaWrapper","TaskDraggable","Card","listId","cardId","cardData","setEditMode","content","card_content","updateCard","contentClick","deleteTaskClick","deleteCard","draggableId","index","disableInteractiveElementBlocking","draggableProvided","draggableSnapshot","innerRef","draggableProps","dragHandleProps","onClick","label","Wrapper","AddCard","compose","setCompose","shouldFitContainer","iconBefore","size","secondaryColor","appearance","borderRadius","backgroundColor","listCards","card","addCard","Container","ListTitle","setDragBlocking","title","setUpdateValue","_title","trim","setTimeout","updateListTitle","deleteList","ListContent","TaskList","isDraggingOver","List","data","listData","cardIds","sort","a","b","dragBlocking","provided","droppableId","droppableProvided","droppableSnapshot","droppableProps","map","id","CustomInput","Textfield","AddList","setListTitle","refInput","padding","type","BoardContainer","onBeforeDragStart","tmp","document","activeElement","tagName","toUpperCase","onDragStart","onDragEnd","result","destination","initialPosition","finalPosition","source","values","forEach","Math","min","max","sourceCards","destinationCards","movingCard","reorderCardPosition","Board","setBoardData","sub","bd","unsubscribe","listIds","direction","GlobalStyles","createGlobalStyle","Parent","isNewUser","emptybg","NewUserSection","section","KanbanBoard","constructor","class","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.035c4b05.chunk.js","sourcesContent":["import { Subject } from \"rxjs\";\nimport { v4 as uuidv4 } from 'uuid';\n\nlet boardData = null;\n\nexport const boardDataSubject = new Subject();\n\nboardDataSubject.subscribe(_boardData => {\n  boardData = _boardData;\n});\n\nexport const reorderListPosition = (initialPosition, finalPosition) => {\n  Object.values(boardData).forEach(list => {\n    if (list.position === initialPosition) {\n      list.position = finalPosition;\n      return;\n    }\n    if (\n      list.position < Math.min(initialPosition, finalPosition) ||\n      list.position > Math.max(initialPosition, finalPosition)\n    ) {\n      return;\n    }\n    if (initialPosition < finalPosition) {\n      list.position--;\n      return;\n    }\n    list.position++;\n  });\n\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const reorderCardPosition = (source, destination, cardId) => {\n  // moving card within same list\n  if (source.droppableId === destination.droppableId) {\n    const { cards } = boardData[source.droppableId];\n    Object.values(cards).forEach(card => {\n      if (card.position === source.index) {\n        card.position = destination.index;\n        return;\n      }\n      if (\n        card.position < Math.min(source.index, destination.index) ||\n        card.position > Math.max(source.index, destination.index)\n      ) {\n        return;\n      }\n      if (source.index < destination.index) {\n        card.position--;\n        return;\n      }\n      card.position++;\n    });\n  }\n  \n  // moving card between different lists\n  else {\n    const sourceCards = boardData[source.droppableId].cards;\n    const destinationCards = boardData[destination.droppableId].cards;\n    const movingCard = boardData[source.droppableId].cards[cardId];\n    Object.values(sourceCards).forEach(card => {\n      if (card.position > source.index) {\n        card.position--;\n      }\n    });\n    Object.values(destinationCards).forEach(card => {\n      if (card.position >= destination.index) {\n        card.position++;\n      }\n    });\n    delete boardData[source.droppableId].cards[cardId];\n    movingCard.position = destination.index;\n    boardData[destination.droppableId].cards[cardId] = movingCard;\n  }\n\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const addCard = (listId, content) => {\n  const listCards = boardData[listId].cards;\n  const position = Object.keys(listCards).length;\n  const card = { position, card_content: content };\n  boardData[listId].cards[uuidv4()] = card;\n\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const updateCard = (listId, cardId, content) => {\n  boardData[listId].cards[cardId].card_content = content;\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const addList = listTitle => {\n  const position = Object.keys(boardData).length;\n  const list = { position, list_title: listTitle, cards: {} };\n  boardData[uuidv4()] = list;\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const updateListTitle = (listId, listTitle) => {\n  boardData[listId].list_title = listTitle;\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const deleteList = listId => {\n  delete boardData[listId];\n  boardDataSubject.next({ ...boardData });\n};\n\nexport const deleteCard = (listId, cardId) => {\n  delete boardData[listId].cards[cardId];\n  boardDataSubject.next({ ...boardData });\n};\n","import localforage from \"localforage\";\nimport { boardDataSubject } from \"./state/boardData\";\n\nboardDataSubject.subscribe(boardData => {\n  localforage.setItem(\"boardData\", boardData);\n});\n\nlocalforage.getItem(\"boardData\").then(function(boardData) {\n  // Populate data on first run\n  if (boardData === null) {\n    boardDataSubject.next(defaultBoardData);\n    return;\n  }\n  boardDataSubject.next(boardData);\n});\n\nconst defaultBoardData = {\n  \n};\n","import React, { useState, useEffect, useRef } from \"react\";\nimport styled from \"styled-components\";\nimport TextArea from '@atlaskit/textarea';\n\nconst CustomTextArea = styled(TextArea)`\n  cursor: ${props => (props.editMode ? \"text\" : \"grab\")} !important;\n  height: auto !important;\n  overflow-y: hidden !important;\n  border: none !important;\n  resize: none !important;\n  border-radius: 3px !important;\n  width: 100% !important;\n  background: transparent !important;\n  font-size: inherit !important;\n  font-weight: inherit !important;\n  color: inherit !important;\n  margin: -4px 0px !important;\n  padding: 4px 8px !important;\n  &:focus {\n    background: white !important;\n    box-shadow: inset 0 0 0 2px #0079bf !important;\n    outline: 0 !important;\n  }\n`;\n\nconst AutoSizeTextArea = ({\n  placeholder,\n  editMode,\n  onSave,\n  updateValue,\n  onBlur }) => {\n  const [textAreaValue, setTextAreaValue] = useState(\"\");\n  const textAreaRef = useRef(null);\n\n  useEffect(() => {\n    setTextAreaValue(updateValue);\n  }, [updateValue]);\n\n  useEffect(() => {\n    resizeTextArea();\n  }, [textAreaValue]);\n\n  useEffect(() => {\n    if (editMode) {\n      textAreaRef.current.focus();\n      textAreaRef.current.select();\n    }\n  }, [editMode]);\n\n  const resizeTextArea = () => {\n    textAreaRef.current.style.height = \"auto\";\n    textAreaRef.current.style.height = textAreaRef.current.scrollHeight + \"px\";\n  };\n  const onChange = e => {\n    setTextAreaValue(e.target.value);\n  };\n\n  const onKeyDown = e => {\n    // enter pressed\n    if (e.keyCode === 13) {\n      e.preventDefault();\n      onSave(textAreaValue);\n      textAreaRef.current.blur();\n    }\n  };\n\n  return (\n    <CustomTextArea\n      ref={textAreaRef}\n      value={textAreaValue}\n      onChange={onChange}\n      rows={1}\n      onKeyDown={onKeyDown}\n      onBlur={() => onBlur(textAreaValue)}\n      spellCheck=\"false\"\n      editMode={editMode}\n      placeholder={placeholder}\n    />\n  );\n};\nexport default AutoSizeTextArea;","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { updateCard, deleteCard } from \"../state/boardData\";\nimport AutoSizeTextArea from \"./AutoSizeTextArea\";\nimport CrossCircleIcon from '@atlaskit/icon/glyph/cross-circle';\n\nconst Delete = styled.div`\n  position: absolute;\n  top: 4px;\n  right: 4px;\n  text-align: center;\n  display: none;\n`;\n\nconst TextAreaWrapper = styled.div`\n  padding: 8px 18px 2px 2px;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: bold;\n  \n`;\n\nconst TaskDraggable = styled.div`\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: ${props => props.editMode ? \"none\" : \" 0 6px 10px rgba(0,0,0,.08), 0 0 6px rgba(0,0,0,.05)\"};\n  transition: .3s transform cubic-bezier(.155,1.105,.295,1.12),.3s box-shadow,.3s -webkit-transform cubic-bezier(.155,1.105,.295,1.12);\n  margin-bottom: 8px;\n  position: relative;\n\n  &:hover {\n    transform: scale(1.05);\n    box-shadow: 0 10px 20px rgba(0,0,0,.12), 0 4px 8px rgba(0,0,0,.06);\n  }\n\n  &:hover ${Delete} {\n    display: ${props => props.editMode ? \"none\" : \"block\"};\n    cursor: pointer;\n  }\n`;\n\nconst Card = ({ listId, cardId, cardData }) => {\n  const [editMode, setEditMode] = useState(false);\n\n  const onSave = content => {\n    updateCard(listId, cardId, content);\n    setEditMode(false);\n  };\n\n  const contentClick = () => {\n    setEditMode(true);\n  };\n\n  const deleteTaskClick = () => {\n    deleteCard(listId, cardId);\n  };\n\n  return (\n    <Draggable\n      draggableId={cardId}\n      index={cardData.position}\n      disableInteractiveElementBlocking={!editMode}\n    >\n      {(draggableProvided, draggableSnapshot) => (\n        <TaskDraggable\n          ref={draggableProvided.innerRef}\n          {...draggableProvided.draggableProps}\n          {...draggableProvided.dragHandleProps}\n          editMode={editMode}\n        >\n          <TextAreaWrapper onClick={contentClick}>\n            <AutoSizeTextArea\n              onSave={onSave}\n              updateValue={cardData.card_content}\n              onBlur={onSave}\n              editMode={editMode}\n            ></AutoSizeTextArea>\n          </TextAreaWrapper>\n\n          <Delete onClick={deleteTaskClick}><CrossCircleIcon label=\"Delete\" /></Delete>\n        </TaskDraggable>\n      )}\n    </Draggable>\n  );\n};\nexport default Card;","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { addCard } from \"../state/boardData\";\nimport AutoSizeTextArea from \"./AutoSizeTextArea\";\nimport Button from '@atlaskit/button';\nimport AddCircleIcon from '@atlaskit/icon/glyph/add-circle';\n\nconst Wrapper = styled.div`\n  padding: 8px;\n  font-size: 16px;\n`;\n\nconst TextAreaWrapper = styled.div`\n  padding: 16px 24px 8px 8px;\n  border-radius: 5px;\n  font-size: inherit;\n`;\n\nconst AddCard = ({ listId }) => {\n  const [compose, setCompose] = useState(false);\n\n  if (!compose) {\n    return (\n      <Wrapper>\n        <Button\n          onClick={() => setCompose(true)}\n          shouldFitContainer\n          iconBefore={<AddCircleIcon label=\"\" size=\"medium\" secondaryColor=\"rgb(52, 69, 99)\" />}\n          appearance=\"primary\"\n          style={{borderRadius: '5px', backgroundColor: '#4D977F'}}\n        >\n          Add a task\n        </Button>\n      </Wrapper>\n    );\n  }\n\n  const onSave = content => {\n    addCard(listId, content);\n    setCompose(false);\n  };\n\n  const cancel = () => {\n    setCompose(false);\n  };\n\n  return (\n    <TextAreaWrapper>\n      <AutoSizeTextArea\n        onSave={onSave}\n        updateValue=\"\"\n        onBlur={cancel}\n        editMode={true}\n        placeholder=\"Enter task desctiption...\"\n      ></AutoSizeTextArea>\n    </TextAreaWrapper>\n  );\n};\nexport default AddCard;","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport AutoSizeTextArea from \"./AutoSizeTextArea\";\nimport { updateListTitle, deleteList } from \"../state/boardData\";\nimport CrossCircleIcon from '@atlaskit/icon/glyph/cross-circle';\n\nconst Delete = styled.div`\n  position: absolute;\n  top: 16px;\n  right: 16px;\n  text-align: center;\n  display: none;\n`;\n\nconst Container = styled.div`\n  position: relative;\n  && {\n    cursor: pointer;\n  }\n  &:hover ${Delete} {\n    display: ${props => props.editMode ? \"none\" : \"block\"};\n  }\n`;\n\nconst TextAreaWrapper = styled.div`\n  padding: 10px 8px;\n  padding-right: 36px;\n  font-weight: bolder;\n  font-size: 1.5rem;\n  &textarea {\n    font-weight: 600;\n  }\n`;\n\nconst ListTitle = ({ setDragBlocking, dragHandleProps, listId, title }) => {\n  const [editMode, setEditMode] = useState(false);\n  const [updateValue, setUpdateValue] = useState(title);\n\n  const onSave = _title => {\n    if (_title.trim() === \"\") {\n      setUpdateValue(\"\");\n      setTimeout(() => setUpdateValue(title), 0);\n    } else {\n      updateListTitle(listId, _title);\n    }\n\n    setDragBlocking(false);\n    setEditMode(false);\n  };\n\n  const titleClick = () => {\n    setDragBlocking(true);\n    setEditMode(true);\n  };\n\n  const deleteListClick = () => {\n    deleteList(listId);\n  };\n\n  return (\n    <Container {...dragHandleProps} editMode={editMode}>\n      <TextAreaWrapper onClick={titleClick}>\n        <AutoSizeTextArea\n          onSave={onSave}\n          updateValue={updateValue}\n          onBlur={onSave}\n          editMode={editMode}\n        ></AutoSizeTextArea>\n      </TextAreaWrapper>\n\n      <Delete onClick={deleteListClick}><CrossCircleIcon label=\"Delete\" size=\"large\" /></Delete>\n    </Container>\n  );\n};\nexport default ListTitle;","import React, { useState } from \"react\";\nimport Card from \"./Card\";\nimport AddCard from \"./AddCard\";\nimport ListTitle from \"./ListTitle\";\nimport styled from \"styled-components\";\nimport { Draggable, Droppable } from \"react-beautiful-dnd\";\n\nconst Container = styled.div`\n  margin: 8px;\n  width: 260px;\n\n  display: flex;\n  flex-direction: column;\n  flex: 0 0 260px;\n`;\n\nconst ListContent = styled.div`\n  background-color: #F8F7F6;\n  border-radius: 5px;\n`;\n\nconst TaskList = styled.div`\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${props => (props.isDraggingOver ? '#A2CAC2' : '#F8F7F6')};\n`;\n\nconst sortFn = data => (a, b) => {\n  return data[a].position - data[b].position;\n};\n\nconst List = ({ listId, listData }) => {\n  const cardIds = Object.keys(listData.cards).sort(sortFn(listData.cards));\n\n  const [dragBlocking, setDragBlocking] = useState(false);\n\n  return (\n    <Draggable\n      disableInteractiveElementBlocking={!dragBlocking}\n      draggableId={listId}\n      index={listData.position}\n    >\n      {provided => (\n        <Container ref={provided.innerRef} {...provided.draggableProps}>\n          <ListContent>\n            <ListTitle\n              dragHandleProps={provided.dragHandleProps}\n              listId={listId}\n              title={listData.list_title}\n              setDragBlocking={setDragBlocking}\n            ></ListTitle>\n\n            <Droppable droppableId={listId}>\n              {(droppableProvided, droppableSnapshot) => (\n                <TaskList\n                  ref={droppableProvided.innerRef}\n                  {...droppableProvided.droppableProps}\n                  isDraggingOver={droppableSnapshot.isDraggingOver}\n                >\n                  {cardIds.map(id => {\n                    return (\n                      <Card\n                        key={id}\n                        cardId={id}\n                        listId={listId}\n                        cardData={listData.cards[id]}\n                      ></Card>\n                    );\n                  })}\n                  {droppableProvided.placeholder}\n                </TaskList>\n              )}\n            </Droppable>\n            <AddCard listId={listId}></AddCard>\n          </ListContent>\n        </Container>\n      )}\n    </Draggable>\n  );\n};\nexport default List;","import React, { useState, useRef, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { addList } from \"../state/boardData\";\nimport Button from '@atlaskit/button';\nimport AddCircleIcon from '@atlaskit/icon/glyph/add-circle';\nimport Textfield from '@atlaskit/textfield';\n\nconst Container = styled.div`\n  width: 272px;\n  flex: 0 0 272px;\n  border-right: 8px solid transparent;\n  margin-left: 4px;\n`;\n\nconst Wrapper = styled.div`\n  padding: 8px;\n  font-size: 16px;\n`;\n\nconst TextAreaWrapper = styled.div`\n  border-radius: 5px;\n  font-size: inherit;\n`;\n\n\nconst CustomInput = styled(Textfield)`\n  font-size: inherit !important;\n  border-radius: 3px !important;\n  border-color: #4D977F !important;\n  &:focus {\n    box-shadow: inset 0 0 0 2px #0079bf !important;\n    outline: 0 !important;\n  }\n`;\n\nconst AddList = () => {\n  const [compose, setCompose] = useState(false);\n  const [listTitle, setListTitle] = useState(\"\");\n  const onChange = e => {\n    setListTitle(e.target.value);\n  };\n  const refInput = useRef(null);\n\n  useEffect(() => {\n    if (compose) {\n      refInput.current.focus();\n    }\n  }, [compose]);\n\n  const onKeyDown = e => {\n    if (e.keyCode === 13) {\n      // e.preventDefault();\n      addList(listTitle);\n      setListTitle(\"\");\n      setCompose(false);\n    }\n  };\n\n  const onBlur = () => {\n    if (listTitle.length > 0) {\n      addList(listTitle);\n      setListTitle(\"\");\n    }\n    setCompose(false);\n  };\n\n  return (\n    <Container>\n      <Wrapper compose={compose}>\n        {compose || (\n          <Button\n            onClick={() => setCompose(true)}\n            shouldFitContainer\n            iconBefore={<AddCircleIcon label=\"\" size=\"medium\" label=\"\" secondaryColor=\"rgb(52, 69, 99)\" />}\n            appearance=\"primary\"\n            style={{borderRadius: '5px', padding: '0 6px', backgroundColor: '#4D977F'}}\n          >\n            Create new list\n          </Button>\n        )}\n        {compose && (\n          <TextAreaWrapper>\n            <CustomInput\n              ref={refInput}\n              type=\"text\"\n              value={listTitle}\n              onChange={onChange}\n              onKeyDown={onKeyDown}\n              onBlur={onBlur}\n              placeholder=\"Enter list title...\"\n            />\n          </TextAreaWrapper>\n        )}\n      </Wrapper>\n    </Container>\n  );\n};\nexport default AddList;","import React, { useState, useEffect } from \"react\";\nimport { boardDataSubject, reorderListPosition, reorderCardPosition } from \"../state/boardData\";\nimport List from \"./List\";\nimport AddList from \"./AddList\";\nimport styled from \"styled-components\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\n\nconst BoardContainer = styled.div`\n  white-space: nowrap;\n  overflow-x: auto;\n  display: flex;\n`;\n\nconst sortFn = data => (a, b) => {\n  return data[a].position - data[b].position;\n};\n\nconst onBeforeDragStart = tmp => {\n  if (document.activeElement.tagName.toUpperCase() === \"TEXTAREA\") {\n    document.activeElement.blur();\n  }\n};\n\nconst onDragStart = tmp => {};\n\nconst onDragEnd = result => {\n  // dropped nowhere\n  if (!result.destination) {\n    return;\n  }\n  const source = result.source;\n  const destination = result.destination;\n\n  // did not move anywhere\n  if (\n    source.droppableId === destination.droppableId &&\n    source.index === destination.index\n  ) {\n    return;\n  }\n\n  if (result.type === \"COLUMN\") {\n    reorderListPosition(source.index, destination.index);\n    return;\n  }\n\n  reorderCardPosition(source, destination, result.draggableId);\n};\n\nconst Board = () => {\n  const [boardData, setBoardData] = useState(null);\n  useEffect(() => {\n    const sub = boardDataSubject.subscribe(bd => setBoardData(bd));\n    return () => sub.unsubscribe();\n  }, []);\n\n  if (!boardData) {\n    return <div>loading</div>;\n  }\n\n  const listIds = Object.keys(boardData).sort(sortFn(boardData));\n\n  return (\n    <DragDropContext\n      onBeforeDragStart={onBeforeDragStart}\n      onDragStart={onDragStart}\n      onDragEnd={onDragEnd}\n    >\n      <Droppable droppableId=\"board\" type=\"COLUMN\" direction=\"horizontal\">\n        {provided => (\n          <BoardContainer ref={provided.innerRef} {...provided.droppableProps}>\n            {listIds.map(id => {\n              return (\n                <List key={id} listId={id} listData={boardData[id]}></List>\n              );\n            })}\n            {provided.placeholder}\n            <AddList />\n          </BoardContainer>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n};\nexport default Board;","export default __webpack_public_path__ + \"static/media/no_tasks.e3d3c397.svg\";","import React, { useState, useEffect } from \"react\";\nimport { boardDataSubject } from \"./state/boardData\";\nimport '@atlaskit/css-reset'\nimport Board from \"./components/Board\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport emptybg from './img/no_tasks.svg'\n\nconst GlobalStyles = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100;300;400;500;700;900&display=swap');\n  * {\n    font-family: 'Roboto', sans-serif;\n  }\n`;\n\nconst Parent = styled.div`\n  display: flex;\n  height: 100vh;\n  background-image: ${props => (props.isNewUser ? `url(${emptybg})` : '')};\n  background-repeat: no-repeat;\n  background-size: 35%;\n  background-position-x: 10%;\n  background-position-y: 90%;\n`;\n\nconst Container = styled.div`\n  padding: 100px 100px;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst NewUserSection = styled.section`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin-left: 25%;\n  margin-right: 3%;\n\n  p {\n    font-size: 3rem;\n    font-weight: 200;\n  }\n\n  h1 {\n    font-size: 6rem;\n  }\n`;\n\nconst KanbanBoard = () => {\n  const [boardData, setBoardData] = useState(null);\n  useEffect(() => {\n    const sub = boardDataSubject.subscribe(bd => setBoardData(bd));\n    return () => sub.unsubscribe();\n  }, []);\n\n  const isNewUser = boardData && Object.keys(boardData).length === 0 && boardData.constructor === Object;\n  \n  return (\n    <Parent isNewUser={isNewUser}>\n      <GlobalStyles />\n      <Container>\n        <Board />\n      </Container>\n      { isNewUser &&\n        <NewUserSection>\n              <div id=\"intro\" class=\"intro\">\n                  <h1>Welcome to Kanban board</h1>\n                  <p>A kanban board is  designed to help visualize work, limit work-in-progress, and maximize efficiency.</p>\n                  <p>Start by creating a new list</p>\n              </div>\n        </NewUserSection>\n      }\n    </Parent>\n  );\n}\n\nexport default KanbanBoard;","import \"./devGlobal\";\nimport \"./storage\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport KanbanBoard from \"./KanbanBoard\";\n\nReactDOM.render(<KanbanBoard />, document.getElementById(\"root\"));\n"],"sourceRoot":""}